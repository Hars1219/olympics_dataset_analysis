# -*- coding: utf-8 -*-
"""Olympics_Dataset_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mk6WGcvLjjyiRE38kAwioJUT-nyuRCHv
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""# LOAD DATASET"""

from google.colab import drive

drive.mount('/content/drive')

athletes = pd.read_csv('/content/drive/MyDrive/DS PROJECTS DATA/athlete_events.csv')
region = pd.read_csv('/content/drive/MyDrive/DS PROJECTS DATA/noc_regions.csv')

athletes.head()

region.head()

"""JOIN THE DATAFRAMES"""

athletes_df = athletes.merge(region, how ='left', on = 'NOC' )
athletes_df.head()

athletes_df.shape

"""COLUMN NAMES CONSISTENT"""

athletes_df.rename(columns={'region':'Region', 'notes': 'Notes'}, inplace=True);

athletes_df.head()

athletes_df.info()

athletes_df.describe()

"""CHECK NULL VALUES"""

nan_values = athletes_df.isna()
nan_columns = nan_values.any()
nan_columns

athletes_df.isnull().sum()

"""INDIA DETAILS"""

athletes_df.query('Team == "India"').head(8)

athletes_df.query('Team == "China"').head(8)

"""# TOP COUNTRIES PARTICIPATING"""

top_15_countries = athletes_df.Team.value_counts().sort_values(ascending=False).head(15)
top_15_countries

"""PLOT FOR TOP 15 COUNTRIES"""

plt.figure(figsize=(12,6))
#plt.xticks(rotation=20)
plt.title('Overall Participations by Country')
sns.barplot(x=top_15_countries.index, y=top_15_countries, palette= 'Set2')

"""AGE DISTRIBUTION OF PARTICIPANTS"""

plt.figure(figsize=(12,6))
plt.title("Age distribution of athletes")
plt.xlabel('Age')
plt.ylabel('No. Of Participants')
plt.hist(athletes_df.Age, bins = np.arange(10,80,2), color ='red', edgecolor ='black');

"""# WINTER OLYMPICS SPORTS"""

winter_sports = athletes_df[athletes_df.Season == 'Winter'].Sport.unique()
winter_sports

"""# SUMMER OLYMPICS SPORTS"""

summer_sports = athletes_df[athletes_df.Season == 'Summer'].Sport.unique()
summer_sports

"""# MALE AND FEMALE PARTICIPANTS"""

gender_counts = athletes_df.Sex.value_counts()
gender_counts

"""# PIE PLOT FOR MALE AND FEMALE ATHLETES"""

plt.figure(figsize=(12,6))
plt.title('Gender Distribution')
plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=150, shadow=True);

"""# TOTAL MEDALS"""

athletes_df.Medal.value_counts()

"""# TOTAL NO. OF FEMALE ATHLETES IN EACH OLYMPICS"""

female_participants = athletes_df[(athletes_df.Sex=='F') & (athletes_df.Season=='Summer')][['Sex','Year']]
female_participants = female_participants.groupby('Year').count().reset_index()
female_participants.tail()

womenOlympics = athletes_df[(athletes_df.Sex =='F') & (athletes_df.Season == 'Summer')]

sns.set(style="darkgrid")
plt.figure(figsize=(20,10))
sns.countplot(x='Year', data=womenOlympics, palette= "Spectral")
plt.title('Women Participation')

part = womenOlympics.groupby('Year')['Sex'].value_counts()
plt.figure(figsize=(20,10))
part.loc[:,'F'].plot()
plt.title('Plot of female Athletes Over time')

"""# GOLD MEDAL ATHLETES"""

goldmedals = athletes_df[(athletes_df.Medal == 'Gold')]
goldmedals.head()

"""Taking values that are different from NAN"""

goldmedals = goldmedals[np.isfinite(goldmedals['Age'])]

"""# GOLD BEYOND 60"""

goldmedals['ID'][goldmedals['Age'] > 60].count()

sporting_event = goldmedals['Sport'][goldmedals['Age']>60]
sporting_event

"""# Plot for Sporting event"""

plt.figure(figsize=(10,5))
plt.tight_layout()
sns.countplot(sporting_event)
plt.title('Gold Medals For Athletes Over 60 years')

"""# Gold Medals From Each Country"""

goldmedals.Region.value_counts().reset_index(name='Medal').head(10)

totalGoldMedals = goldmedals.Region.value_counts().reset_index(name='Medal').head(10)
g = sns.catplot(x="index", y="Medal", data=totalGoldMedals, height=5, kind="bar", palette="rocket")
g.despine(left=True)
g.set_xlabels("Top 10 Countries")
g.set_ylabels("No. Of Medals")
plt.title('Gold Medals Per Country')